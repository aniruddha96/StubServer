from pycell.client import VizierDBClient as VizierDBClient
from typing import Any, Dict, List, Optional, Union

DATATYPE_DATE: str
DATATYPE_DATETIME: str
DATATYPE_INT: str
DATATYPE_SHORT: str
DATATYPE_LONG: str
DATATYPE_REAL: str
DATATYPE_VARCHAR: str
DATATYPE_GEOMETRY: str
VIZUAL_DELETE_COLUMN: str
VIZUAL_DELETE_ROW: str
VIZUAL_INSERT_COLUMN: str
VIZUAL_INSERT_ROW: str
VIZUAL_MOVE_COLUMN: str
VIZUAL_MOVE_ROW: str
VIZUAL_FILTER_COLUMNS: str
VIZUAL_RENAME_COLUMN: str
VIZUAL_UPDATE_CELL: str
VIZUAL_SORT: str

class DatasetColumn:
    identifier: Any = ...
    name: Any = ...
    data_type: Any = ...
    def __init__(self, identifier: int=..., name: Optional[str]=..., data_type: str=...) -> None: ...

class MutableDatasetRow:
    identifier: Any = ...
    values: Any = ...
    dataset: Any = ...
    caveats: Any = ...
    row_caveat: Any = ...
    def __init__(self, dataset: DatasetClient, values: List[Any], caveats: Optional[List[bool]]=..., row_caveat: bool=..., identifier: str=...) -> None: ...
    def __getitem__(self, key: Any): ...
    def __setitem__(self, key: Any, value: Any): ...
    def get_value(self, column: Union[int, str]) -> Any: ...
    def set_value(self, column: Union[int, str], value: Any, comment: Optional[str]=...) -> Any: ...

class DatasetClient:
    client: Any = ...
    existing_name: Any = ...
    history: Any = ...
    columns: Any = ...
    identifier: Any = ...
    def __init__(self, client: VizierDBClient, dataset: Optional[Dict[str, Any]]=..., identifier: Optional[str]=..., existing_name: str=...) -> None: ...
    def __getitem__(self, key: Any): ...
    def add_delta(self, id: str, **varargs: Any) -> None: ...
    def save(self, name: Optional[str]=..., use_deltas: bool=...) -> Any: ...
    @property
    def properties(self): ...
    def column_index(self, column_id: Union[int, str]) -> int: ...
    def delete_column(self, name: Any) -> None: ...
    def get_column(self, name: Any) -> Optional[DatasetColumn]: ...
    def insert_column(self, name: str, data_type: str=..., position: Optional[int]=...) -> DatasetColumn: ...
    def insert_row(self, values: Optional[List[Any]]=..., position: Optional[int]=...) -> MutableDatasetRow: ...
    def get_cell(self, column: Any, row: int) -> Any: ...
    def move_column(self, name: str, position: int) -> None: ...
    @property
    def rows(self): ...
    def to_bokeh(self, columns: Optional[List[str]]=...) -> Any: ...
    def show_map(self, lat_col: Any, lon_col: Any, label_col: Optional[Any]=..., center_lat: Optional[float]=..., center_lon: Optional[float]=..., zoom: int=..., height: str=..., map_provider: str=...) -> None: ...
    def show_d3_plot(self, chart_type: Any, keys: Any = ..., labels: Any = ..., labels_inner: Any = ..., value_cols: Any = ..., key_col: str = ..., width: int = ..., height: int = ..., title: str = ..., subtitle: str = ..., legend_title: str = ..., x_cols: Any = ..., y_cols: Any = ..., date_cols: Any = ..., open_cols: Any = ..., high_cols: Any = ..., low_cols: Any = ..., close_cols: Any = ..., volume_cols: Any = ..., key: Optional[Any] = ...) -> None: ...
    def show(self) -> None: ...
    def to_json(self, limit: Optional[int]=...) -> Any: ...

def collabel_2_index(label: Any): ...
def import_to_native_type(value: Any, data_type: str) -> Any: ...
def export_from_native_type(value: Any, data_type: str, context: Any=...) -> Any: ...
def assert_type(value: Any, data_type: str, context: Any=...) -> Any: ...
