import ast
import pandas
import re
from pycell.dataset import DatasetClient as DatasetClient, import_to_native_type as import_to_native_type
from pycell.file import FileClient as FileClient
from pycell.plugins import vizier_bokeh_show as vizier_bokeh_show, vizier_matplotlib_render as vizier_matplotlib_render
from typing import Any, Callable, Dict, IO, List, Optional, Tuple

ARTIFACT_TYPE_DATASET: str
MIME_TYPE_DATASET: str
ARTIFACT_TYPE_FUNCTION: str
MIME_TYPE_PYTHON: str
ARTIFACT_TYPE_BLOB: str
MIME_TYPE_PICKLE: str
ARTIFACT_TYPE_PARAMETER: str
ARTIFACT_TYPE_FILE: str
OUTPUT_TEXT: str
OUTPUT_HTML: str
OUTPUT_JAVASCRIPT: str
OUTPUT_DATASET: str
vizierdb: VizierDBClient

class VizierDBClient:
    artifacts: Any = ...
    source: Any = ...
    project_id: Any = ...
    cell_id: Any = ...
    raw_output: Any = ...
    datasets: Any = ...
    py_objects: Any = ...
    def __init__(self, artifacts: Dict[str, Artifact], source: str, raw_output: IO, project_id: str, cell_id: str) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def vizier_request(self, event: str, has_response: bool=..., **fields: Any) -> Optional[Dict[str, Any]]: ...
    def get_artifact_proxies(self) -> Dict[str, ArtifactProxy]: ...
    def get_parameter(self, name: str) -> Any: ...
    def get_module(self, name: str) -> Any: ...
    def get_dataset(self, name: str) -> DatasetClient: ...
    def create_dataset(self, name: str, dataset: DatasetClient, backend_options: List[Tuple[str, str]]=..., use_deltas: bool=...) -> None: ...
    def update_dataset(self, name: str, dataset: DatasetClient, use_deltas: bool=...) -> DatasetClient: ...
    def drop_dataset(self, name: str) -> None: ...
    def new_dataset(self) -> DatasetClient: ...
    def rename_dataset(self, name: str, new_name: str) -> None: ...
    def create_file(self, name: str, filename: Optional[str]=..., mime_type: str=..., binary_mode: bool=...) -> FileClient: ...
    def import_file(self, path: str, name: Optional[str]=..., filename: Optional[str]=..., mime_type: str=..., buffer_size: int=...) -> None: ...
    def get_file(self, name: str, binary_mode: bool=...) -> FileClient: ...
    def get_pickle(self, key: str) -> Any: ...
    def export_pickle(self, key: str, value: Any) -> None: ...
    def pycell_open(self, file: str, mode: str=..., buffering: int=..., encoding: Optional[str]=..., errors: Any=..., newline: Optional[str]=..., closefd: bool=..., opener: Optional[Any]=...) -> IO: ...
    def show(self, value: Any, mime_type: Optional[str]=..., force_to_string: bool=...) -> None: ...
    def show_html(self, value: str) -> None: ...
    def show_javascript(self, code: str, html: str=..., dependencies: List[str]=...) -> None: ...
    def export_module(self, exp: Any, name_override: Optional[str]=..., return_type: Any=...) -> Any: ...
    def get_data_frame(self, name: str) -> pandas.DataFrame: ...
    def save_data_frame(self, name: str, df: pandas.DataFrame) -> None: ...
    def dataset_from_s3(self, bucket: str, folder: str, file: str, line_extracter: Callable[[re.Match, str], Tuple[str, str]]=..., additional_col_gen: Optional[Callable[[re.Match, str], Tuple[str, str]]]=..., delimeter: str=..., line_delimeter: str=...) -> Optional[DatasetClient]: ...
